/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Car;
import model.CarCatalog;

/**
 *
 * @author vigneshguna
 */
public class SearchJPanel extends javax.swing.JPanel {
    
    CarCatalog catalog;
    ButtonGroup cityGroup;
    ButtonGroup availGroup;
    ButtonGroup expiredMaintCertiGroup;

    /**
     * Creates new form SearchJPanel
     */
    public SearchJPanel(CarCatalog catalog) {
        initComponents();
        this.catalog = catalog;
        
        cityGroup = new ButtonGroup();
        cityGroup.add(rdbtnBoston);
        cityGroup.add(rdbtnCambridge);
        cityGroup.add(rdbtnNewYork);
        
        availGroup = new ButtonGroup();
        availGroup.add(btnYesAvail);
        availGroup.add(btnNoAvail);
        
        expiredMaintCertiGroup = new ButtonGroup();
        expiredMaintCertiGroup.add(btnExpMaintCertiF);
        expiredMaintCertiGroup.add(btnNotExpMaintCertiF);
        
        String[] manufArray = new String[catalog.getManufSet().size()];
        catalog.getManufSet().toArray(manufArray);
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(manufArray);
        comboManuf.setModel( model );
    }

   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollBar1 = new javax.swing.JScrollBar();
        lblTitle = new javax.swing.JLabel();
        lblLocat = new javax.swing.JLabel();
        txtLocat = new javax.swing.JTextField();
        lblminiText = new javax.swing.JLabel();
        rdbtnBoston = new javax.swing.JRadioButton();
        rdbtnCambridge = new javax.swing.JRadioButton();
        rdbtnNewYork = new javax.swing.JRadioButton();
        btnFind = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFilterCars = new javax.swing.JTable();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCityCars = new javax.swing.JTable();
        btnBook = new javax.swing.JButton();
        btnClearFilt = new javax.swing.JButton();
        headFiltCars = new javax.swing.JLabel();
        headFilters = new javax.swing.JLabel();
        lblSeatsF = new javax.swing.JLabel();
        txtMinSeatV = new javax.swing.JTextField();
        txtMaxSeatV = new javax.swing.JTextField();
        btnApplyFilt = new javax.swing.JButton();
        lblYearF2 = new javax.swing.JLabel();
        txtManufYearV = new javax.swing.JTextField();
        lblYearF = new javax.swing.JLabel();
        lblAvailabilityF = new javax.swing.JLabel();
        btnYesAvail = new javax.swing.JRadioButton();
        btnNoAvail = new javax.swing.JRadioButton();
        lblMaintCertiF = new javax.swing.JLabel();
        btnExpMaintCertiF = new javax.swing.JRadioButton();
        btnNotExpMaintCertiF = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        lblAvailCarsV = new javax.swing.JLabel();
        lblUnavailCarsV = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblLastUpdatedV = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblModelNumF = new javax.swing.JLabel();
        txtModelNumV = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtSerialNumV = new javax.swing.JTextField();
        lblManufF = new javax.swing.JLabel();
        comboManuf = new javax.swing.JComboBox<>();
        lblTotalCarsV = new javax.swing.JLabel();
        lblz = new javax.swing.JLabel();
        btnClearCity = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        lblTitle.setFont(new java.awt.Font("Lucida Grande", 3, 18)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(255, 153, 0));
        lblTitle.setText("Find your Cab");

        lblLocat.setText("Your Location *");

        txtLocat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLocatActionPerformed(evt);
            }
        });

        lblminiText.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        lblminiText.setText("Some popular cities");

        rdbtnBoston.setText("Boston");

        rdbtnCambridge.setText("Cambridge");

        rdbtnNewYork.setText("New York");

        btnFind.setBackground(new java.awt.Color(255, 153, 0));
        btnFind.setText("Find");
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        jLabel1.setText("Cars in your City");

        tblFilterCars.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Serial Number", "Current City", "Is Available?", "Manufacturer", "Manuf Date", "MaintCerti expired?", "Model Number", "Creation Time", "No of Seats", "Updation Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblFilterCars.setColumnSelectionAllowed(true);
        tblFilterCars.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblFilterCars);

        tblCityCars.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Serial Number", "Current City", "Is Available?", "Manufacturer", "Manuf Date", "MaintCerti expired?", "Model Number", "Creation Time", "No of Seats", "Updation Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCityCars.setColumnSelectionAllowed(true);
        tblCityCars.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tblCityCars);

        btnBook.setBackground(new java.awt.Color(255, 153, 0));
        btnBook.setText("BOOK");
        btnBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookActionPerformed(evt);
            }
        });

        btnClearFilt.setText("Clear Filters");
        btnClearFilt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearFiltActionPerformed(evt);
            }
        });

        headFiltCars.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        headFiltCars.setText("Filtered Cars");

        headFilters.setText("Filters");

        lblSeatsF.setText("min - max seats");

        btnApplyFilt.setBackground(new java.awt.Color(255, 153, 0));
        btnApplyFilt.setText("Apply");
        btnApplyFilt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyFiltActionPerformed(evt);
            }
        });

        lblYearF2.setText("manufactured in a ");

        lblYearF.setText("year");

        lblAvailabilityF.setText("availability");

        btnYesAvail.setText("Yes");

        btnNoAvail.setText("No");

        lblMaintCertiF.setText("maint certificate");

        btnExpMaintCertiF.setText("Expired");
        btnExpMaintCertiF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExpMaintCertiFActionPerformed(evt);
            }
        });

        btnNotExpMaintCertiF.setText("Not Expired");

        jLabel2.setText("Available:");

        jLabel5.setText("Unavailable:");

        jLabel7.setText("Table Last Updated:");

        lblModelNumF.setText("model number");

        jLabel3.setText("serial number");

        lblManufF.setText("manufacturers");

        comboManuf.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboManuf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboManufActionPerformed(evt);
            }
        });

        lblz.setText("Total");

        btnClearCity.setText("Clear City");
        btnClearCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearCityActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Marker Felt", 1, 36)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 153, 0));
        jLabel4.setText("Uber");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblAvailabilityF)
                            .addComponent(lblMaintCertiF)
                            .addComponent(lblModelNumF)
                            .addComponent(lblManufF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnExpMaintCertiF)
                                .addGap(18, 18, 18)
                                .addComponent(btnNotExpMaintCertiF)
                                .addGap(696, 696, 696))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtModelNumV, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboManuf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(17, 17, 17)
                                        .addComponent(btnYesAvail)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnNoAvail)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(lblYearF2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtManufYearV, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblYearF)
                        .addGap(24, 24, 24)))
                .addGap(8, 8, 8))
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblLocat)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtLocat, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(rdbtnBoston)
                        .addGap(18, 18, 18)
                        .addComponent(rdbtnCambridge)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rdbtnNewYork)
                        .addGap(60, 60, 60)
                        .addComponent(btnFind)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClearCity)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addGap(156, 156, 156))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 988, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(headFilters))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addComponent(lblSeatsF)
                                .addGap(18, 18, 18)
                                .addComponent(txtMinSeatV, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtMaxSeatV, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(96, 96, 96)
                                        .addComponent(btnApplyFilt)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnClearFilt))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(325, 325, 325)
                                        .addComponent(jLabel3)
                                        .addGap(31, 31, 31)
                                        .addComponent(txtSerialNumV, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(138, 138, 138)
                        .addComponent(lblz)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblTotalCarsV, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblAvailCarsV, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblUnavailCarsV, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(71, 71, 71)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblLastUpdatedV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(312, 312, 312)
                        .addComponent(lblminiText))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 988, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1016, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(370, 370, 370)
                        .addComponent(btnBook))
                    .addComponent(headFiltCars))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1016, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnBook, btnClearFilt});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLocat)
                    .addComponent(txtLocat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rdbtnBoston)
                    .addComponent(rdbtnCambridge)
                    .addComponent(rdbtnNewYork)
                    .addComponent(btnFind)
                    .addComponent(btnClearCity))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblminiText)
                .addGap(14, 14, 14)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2)
                                .addComponent(lblAvailCarsV, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblz))
                            .addComponent(jLabel7)
                            .addComponent(lblTotalCarsV, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLastUpdatedV, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(196, 196, 196)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(headFilters)
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSeatsF, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtMinSeatV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtMaxSeatV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3)
                                .addComponent(txtSerialNumV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblYearF2)
                                    .addComponent(txtManufYearV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblYearF)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnApplyFilt)
                                    .addComponent(btnClearFilt)))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(lblUnavailCarsV, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAvailabilityF)
                    .addComponent(btnYesAvail)
                    .addComponent(btnNoAvail))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMaintCertiF)
                    .addComponent(btnExpMaintCertiF)
                    .addComponent(btnNotExpMaintCertiF))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblModelNumF)
                    .addComponent(txtModelNumV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblManufF)
                    .addComponent(comboManuf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(headFiltCars)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(btnBook)
                .addContainerGap(51, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(159, 159, 159)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(643, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtLocatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLocatActionPerformed
        
    }//GEN-LAST:event_txtLocatActionPerformed

    private void btnClearFiltActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearFiltActionPerformed
        
        catalog.setCarsTableList(new ArrayList<Car>());
        populateFilterTable();
        clearFilters();
    }//GEN-LAST:event_btnClearFiltActionPerformed

    private void btnBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookActionPerformed
        DefaultTableModel model;
        int selectedRowIndex = tblFilterCars.getSelectedRow();
        model = (DefaultTableModel) tblFilterCars.getModel();
        if (selectedRowIndex < 0) {
            selectedRowIndex = tblCityCars.getSelectedRow();
            model = (DefaultTableModel) tblCityCars.getModel();
            if (selectedRowIndex < 0) {
                JOptionPane.showMessageDialog(this, "Please select a row to Book, from either FilteredList or CityList");
                return;
            }
        }
        Car car = (Car) model.getValueAt(selectedRowIndex, 0);
        
        if(!car.isIsAvailabile()) {
            JOptionPane.showMessageDialog(this, "Sorry, you are trying to book an unavaialble car, please select other car from the list or refilter your search!");
        }
        else {
            //booked
            JOptionPane.showMessageDialog(this, "Your ride is Booked! Cab with serial number "+String.valueOf(car.getCarSerialNumber())+" is on the way...");
            clearCity();
        }
    }//GEN-LAST:event_btnBookActionPerformed

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        clearLabelValues();
        catalog.setCarsCityList(new ArrayList<Car>());
        catalog.setCarsFilterList(new ArrayList<Car>());
        catalog.setCarsTableList(new ArrayList<Car>());
        
        if(txtLocat.getText()==null || txtLocat.getText().isBlank()) {  //null "" " "
            if(!rdbtnBoston.isSelected()){
                if(!rdbtnCambridge.isSelected()) {
                    if(!rdbtnNewYork.isSelected()) {
                        JOptionPane.showMessageDialog(this, "Please either enter or select a city to search");
                        return;
                    }
                    else { catalog.setSelectedCity("new york");}
                }
                else { catalog.setSelectedCity("cambridge"); }
            }
            else { catalog.setSelectedCity("boston");}
        } else {
            catalog.setSelectedCity(txtLocat.getText());
            cityGroup.clearSelection();
        }
        
        assignCityList();
        
        populateCityTable();
        
        lblAvailCarsV.setText(String.valueOf(catalog.getAvailableCars()+" cars"));
        lblUnavailCarsV.setText(String.valueOf(catalog.getUnAvailableCars()+" cars"));
        lblTotalCarsV.setText(String.valueOf(catalog.getTotalCars()+" cars"));
        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
        lblLastUpdatedV.setText(sdf.format(catalog.getLastUpdated()));
        
        //for safety making others to inital value
        catalog.setCarsFilterList(new ArrayList<Car>(catalog.getCarsCityList()));
        catalog.setCarsTableList(new ArrayList<Car>());
        populateFilterTable();
    }//GEN-LAST:event_btnFindActionPerformed

    private void btnApplyFiltActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyFiltActionPerformed
        
        //List<Car> temp = new ArrayList<Car>(catalog.getCarsTableList().isEmpty()? catalog.getCarsFilterList() : catalog.getCarsTableList());
        //for every apply click from filter's table take and filter, not from filtered table
        List<Car> temp = new ArrayList<Car>(catalog.getCarsFilterList());
        catalog.setCarsTableList(new ArrayList<Car>());
        
        if(txtSerialNumV.getText()==null || txtSerialNumV.getText().isEmpty()) {
            temp = new ArrayList<Car>(filterSeat(temp));
            temp = new ArrayList<Car>(filterManufYear(temp));
            temp = new ArrayList<Car>(filterAvailability(temp));
            temp = new ArrayList<Car>(filterExpiredMaintCerti(temp));
            temp = new ArrayList<Car>(filterModelNum(temp));
            temp = new ArrayList<Car>(filterManuf(temp));
        } else {
            temp = new ArrayList<Car>(filterSerialNum(temp));
            clearLeftFilters();
        }
        
        populateFilterTable();
        
    }//GEN-LAST:event_btnApplyFiltActionPerformed

    private void comboManufActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboManufActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboManufActionPerformed

    private void btnExpMaintCertiFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExpMaintCertiFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnExpMaintCertiFActionPerformed

    private void btnClearCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearCityActionPerformed
        
        clearCity(); // clears city, labels, filter values, filtered rows
    }//GEN-LAST:event_btnClearCityActionPerformed
    
    public List<Car> filterSeat(List<Car> temp){
        int min = (txtMinSeatV.getText()==null || txtMinSeatV.getText().isEmpty()) ? -1 : Integer.parseInt(txtMinSeatV.getText());
        int max = (txtMaxSeatV.getText()==null || txtMaxSeatV.getText().isEmpty()) ? -1 : Integer.parseInt(txtMaxSeatV.getText());
        
            if (min>=0) {
                for (Car car : temp) {
                  if(min <= car.getNumOfSeats()) {
                    if (max<0) {
                        //add
                        if (!catalog.getCarsTableList().contains(car)) {
                            catalog.getCarsTableList().add(car);
                        }
                    }
                    else if (max>=car.getNumOfSeats()) {
                        //add
                        if (!catalog.getCarsTableList().contains(car)) {
                          catalog.getCarsTableList().add(car);
                        }
                    }
                    //dont add, remove
                    else if (catalog.getCarsTableList().contains(car)) {
                        catalog.getCarsTableList().remove(car);
                    }
                  }
                  //dont add, remove
                  else if (catalog.getCarsTableList().contains(car)) {
                    catalog.getCarsTableList().remove(car);
                  }
               }
            }
            else if (max>=0) {
                for (Car car : temp) {
                if (max>=car.getNumOfSeats()) {
                        //add
                        if (!catalog.getCarsTableList().contains(car)) {
                            catalog.getCarsTableList().add(car);
                        }
                }
                //dont add, remove
                else if (catalog.getCarsTableList().contains(car)) {
                    catalog.getCarsTableList().remove(car);
                }
                }
            }
            //skip
            
        return catalog.getCarsTableList().isEmpty()? temp : catalog.getCarsTableList();
        
    }
    public List<Car> filterManufYear(List<Car> temp) {
        int year = (txtManufYearV.getText()==null || txtManufYearV.getText().isEmpty()) ? -1 : Integer.parseInt(txtManufYearV.getText());
        if (year>=0) {
            for (Car car : temp) {
                if (car.getManufYear()==year){
                    //add
                    if (!catalog.getCarsTableList().contains(car)) {
                        catalog.getCarsTableList().add(car);
                    }
                }
                //dont add, remove
                else if (catalog.getCarsTableList().contains(car)) {
                    catalog.getCarsTableList().remove(car);
                }
            }
        }
        //skip
        return catalog.getCarsTableList().isEmpty()? temp : catalog.getCarsTableList();
    }
    public List<Car> filterAvailability(List<Car> temp) {
        int toCheck = (btnYesAvail.isSelected())? 1: (btnNoAvail.isSelected())? 0: -1;
        
        if (toCheck>=0){
            //one of them is selected
            for (Car car : temp) {
                if (toCheck==1) {
                    if(car.isIsAvailabile()==true) {
                        //add
                        if (!catalog.getCarsTableList().contains(car)) {
                            catalog.getCarsTableList().add(car);
                        }
                    }
                    //dont add, remove
                    else if (catalog.getCarsTableList().contains(car)) {
                        catalog.getCarsTableList().remove(car);
                    }
                } else { //toCheck 0
                    if(car.isIsAvailabile()==false) {
                        //add
                        if (!catalog.getCarsTableList().contains(car)) {
                            catalog.getCarsTableList().add(car);
                        }
                    }
                    //dont add, remove
                    else if (catalog.getCarsTableList().contains(car)) {
                        catalog.getCarsTableList().remove(car);
                    }
                }
            }
        }
        //skip
        return catalog.getCarsTableList().isEmpty()? temp : catalog.getCarsTableList();
    }
    public List<Car> filterExpiredMaintCerti(List<Car> temp) {
        int toCheck = (btnExpMaintCertiF.isSelected())? 1: (btnNotExpMaintCertiF.isSelected())? 0: -1;
        
        if (toCheck>=0){
            //one of them is selected
            for (Car car : temp) {
                if (toCheck==1) {
                    if(car.isIsExpiredMaintCerti()==true) {
                        //add
                        if (!catalog.getCarsTableList().contains(car)) {
                            catalog.getCarsTableList().add(car);
                        }
                    }
                    //dont add, remove
                    else if (catalog.getCarsTableList().contains(car)) {
                        catalog.getCarsTableList().remove(car);
                    }
                } else { //toCheck 0
                    if(car.isIsExpiredMaintCerti()==false) {
                        //add
                        if (!catalog.getCarsTableList().contains(car)) {
                            catalog.getCarsTableList().add(car);
                        }
                    }
                    //dont add, remove
                    else if (catalog.getCarsTableList().contains(car)) {
                        catalog.getCarsTableList().remove(car);
                    }
                }
            }
        }
        //skip
        return catalog.getCarsTableList().isEmpty()? temp : catalog.getCarsTableList();
    }
    public List<Car> filterModelNum(List<Car> temp) {
        String modelNum = (txtModelNumV.getText()==null || txtModelNumV.getText().isEmpty()) ? null : txtModelNumV.getText();
        if (modelNum!=null) {
            for (Car car : temp) {
                if (modelNum.equalsIgnoreCase(car.getModelNum())){
                    //add
                    if (!catalog.getCarsTableList().contains(car)) {
                        catalog.getCarsTableList().add(car);
                    }
                }
                //dont add, remove
                else if (catalog.getCarsTableList().contains(car)) {
                    catalog.getCarsTableList().remove(car);
                }
            }
        }
        //skip
        return catalog.getCarsTableList().isEmpty()? temp : catalog.getCarsTableList();
    }
    public List<Car> filterManuf(List<Car> temp) {
        String manuf = ("--Select--".equals(String.valueOf(comboManuf.getSelectedItem())))? null : String.valueOf(comboManuf.getSelectedItem());
        if (manuf!=null) {
            for (Car car : temp) {
                if (manuf.equalsIgnoreCase(car.getManufacturer())){
                    //add
                    if (!catalog.getCarsTableList().contains(car)) {
                        catalog.getCarsTableList().add(car);
                    }
                }
                //dont add, remove
                else if (catalog.getCarsTableList().contains(car)) {
                    catalog.getCarsTableList().remove(car);
                }
            }
        }
        //skip
        return catalog.getCarsTableList().isEmpty()? temp : catalog.getCarsTableList();
    }
    public List<Car> filterSerialNum(List<Car> temp) {
        int serialNum = (txtSerialNumV.getText()==null || txtSerialNumV.getText().isEmpty()) ? -1 : Integer.parseInt(txtSerialNumV.getText());
        if (serialNum!=-1) {
            for (Car car : temp) {
                if (serialNum == car.getCarSerialNumber()){
                    //add
                    if (!catalog.getCarsTableList().contains(car)) {
                        catalog.getCarsTableList().add(car);
                    }
                }
                //dont add, remove
                else if (catalog.getCarsTableList().contains(car)) {
                    catalog.getCarsTableList().remove(car);
                }
            }
        }
        //skip
        return catalog.getCarsTableList().isEmpty()? temp : catalog.getCarsTableList();
    }
        
    public void assignCityList() {                          // to assign city list
        for (Car car : catalog.getCarsFullList()) {
            if (catalog.getSelectedCity().equalsIgnoreCase(car.getCurrentCity())) {
                catalog.getCarsCityList().add(car);
            }
        }
    }
    
    public void populateCityTable() {
        
        DefaultTableModel model = (DefaultTableModel) tblCityCars.getModel();
        model.setRowCount(0);

        for (Car car : catalog.getCarsCityList()) {
            
            if(car.isIsAvailabile()) {
                catalog.incrementAvailableCars();
            } else {
                catalog.incrementUnAvailableCars();
            }
            
            Object[] row = new Object[10];
            row[0] = car;   //car.getCarSerialNumber()   ob with tostring invoked - to identify apt car
            row[1] = car.getCurrentCity();
            row[2] = car.isIsAvailabile();
            row[3] = car.getManufacturer();
            row[4] = car.getManufYear();
            row[5] = car.isIsExpiredMaintCerti();
            row[6] = car.getModelNum();

            SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
            row[7] = sdf.format(car.getCreationTime());
            row[8] = car.getNumOfSeats();
            row[9] = (null!=car.getUpdationTime())?sdf.format(car.getUpdationTime()):"";

            model.addRow(row);
        }
        catalog.setTotalCars(catalog.getAvailableCars()+catalog.getUnAvailableCars());
        
    }
    
    public void populateFilterTable() {
        DefaultTableModel model = (DefaultTableModel) tblFilterCars.getModel();
        model.setRowCount(0);

        for (Car car : catalog.getCarsTableList()) {
            Object[] row = new Object[10];
            row[0] = car;   //car.getCarSerialNumber()   ob with tostring invoked - to identify apt car
            row[1] = car.getCurrentCity();
            row[2] = car.isIsAvailabile();
            row[3] = car.getManufacturer();
            row[4] = car.getManufYear();
            row[5] = car.isIsExpiredMaintCerti();
            row[6] = car.getModelNum();

            SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
            row[7] = sdf.format(car.getCreationTime());
            row[8] = car.getNumOfSeats();
            row[9] = (null!=car.getUpdationTime())?sdf.format(car.getUpdationTime()):"";

            model.addRow(row);
        }
    }
    
    public void clearFilters() {        //clears filter values
        txtSerialNumV.setText("");
        clearLeftFilters();
    }
    public void clearLeftFilters(){     
        txtMaxSeatV.setText("");
        txtMinSeatV.setText("");
        txtManufYearV.setText("");
        txtModelNumV.setText("");
        availGroup.clearSelection();
        expiredMaintCertiGroup.clearSelection();
        comboManuf.setSelectedItem("--Select--");
    }
    public void clearCity() {       // clears city, labels, filter values, filtered rows
        txtLocat.setText("");
        cityGroup.clearSelection();
        catalog.setCarsCityList(new ArrayList<Car>());
        populateCityTable();
        
        clearLabelValues();
        
        clearFilters();
        catalog.setCarsFilterList(new ArrayList<Car>());
        catalog.setCarsTableList(new ArrayList<Car>());
        populateFilterTable();
    }
    public void clearLabelValues(){      //clears labels
        catalog.setAvailableCars(0);
        catalog.setUnAvailableCars(0);
        catalog.setTotalCars(0);
        
        lblTotalCarsV.setText("");
        lblAvailCarsV.setText("");
        lblUnavailCarsV.setText("");
        lblLastUpdatedV.setText("");
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApplyFilt;
    private javax.swing.JButton btnBook;
    private javax.swing.JButton btnClearCity;
    private javax.swing.JButton btnClearFilt;
    private javax.swing.JRadioButton btnExpMaintCertiF;
    private javax.swing.JButton btnFind;
    private javax.swing.JRadioButton btnNoAvail;
    private javax.swing.JRadioButton btnNotExpMaintCertiF;
    private javax.swing.JRadioButton btnYesAvail;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> comboManuf;
    private javax.swing.JLabel headFiltCars;
    private javax.swing.JLabel headFilters;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblAvailCarsV;
    private javax.swing.JLabel lblAvailabilityF;
    private javax.swing.JLabel lblLastUpdatedV;
    private javax.swing.JLabel lblLocat;
    private javax.swing.JLabel lblMaintCertiF;
    private javax.swing.JLabel lblManufF;
    private javax.swing.JLabel lblModelNumF;
    private javax.swing.JLabel lblSeatsF;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTotalCarsV;
    private javax.swing.JLabel lblUnavailCarsV;
    private javax.swing.JLabel lblYearF;
    private javax.swing.JLabel lblYearF2;
    private javax.swing.JLabel lblminiText;
    private javax.swing.JLabel lblz;
    private javax.swing.JRadioButton rdbtnBoston;
    private javax.swing.JRadioButton rdbtnCambridge;
    private javax.swing.JRadioButton rdbtnNewYork;
    private javax.swing.JTable tblCityCars;
    private javax.swing.JTable tblFilterCars;
    private javax.swing.JTextField txtLocat;
    private javax.swing.JTextField txtManufYearV;
    private javax.swing.JTextField txtMaxSeatV;
    private javax.swing.JTextField txtMinSeatV;
    private javax.swing.JTextField txtModelNumV;
    private javax.swing.JTextField txtSerialNumV;
    // End of variables declaration//GEN-END:variables
}
