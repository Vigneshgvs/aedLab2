/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.text.SimpleDateFormat;
import javax.swing.table.DefaultTableModel;
import model.Car;
import model.CarCatalog;
import java.util.Date;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;

/**
 *
 * @author vigneshguna
 */
public class ViewJPanel extends javax.swing.JPanel {

    CarCatalog catalog;
    int carForUpdate_SerialNum = 0;

    /**
     * Creates new form ViewJPanel
     */
    public ViewJPanel(CarCatalog catalog) {
        initComponents();
        this.catalog = catalog;

        ButtonGroup isAvailgroup = new ButtonGroup();
        isAvailgroup.add(rdbAvailY);
        isAvailgroup.add(rdbAvailN);
        ButtonGroup isExpiredMaintCertiGroup = new ButtonGroup();
        isExpiredMaintCertiGroup.add(rdbExpiredMaintCertiN);
        isExpiredMaintCertiGroup.add(rdbExpiredMaintCertiY);

        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCars = new javax.swing.JTable();
        btnDelete = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        updateJPanel = new javax.swing.JPanel();
        rdbAvailY = new javax.swing.JRadioButton();
        rdbAvailN = new javax.swing.JRadioButton();
        lblNoOfSeats = new javax.swing.JLabel();
        rdbExpiredMaintCertiY = new javax.swing.JRadioButton();
        lblModelNumb = new javax.swing.JLabel();
        rdbExpiredMaintCertiN = new javax.swing.JRadioButton();
        btnUpdate = new javax.swing.JButton();
        lblIsExpiredMaintCerti = new javax.swing.JLabel();
        txtSerialNum = new javax.swing.JTextField();
        txtNoOfSeats = new javax.swing.JTextField();
        txtModelNum = new javax.swing.JTextField();
        lblSerialNum = new javax.swing.JLabel();
        txtCurrentCity = new javax.swing.JTextField();
        lblCurrentCity = new javax.swing.JLabel();
        txtManuf = new javax.swing.JTextField();
        lblIsAvail = new javax.swing.JLabel();
        txtManufYear = new javax.swing.JTextField();
        lblManuf = new javax.swing.JLabel();
        lblManufYear = new javax.swing.JLabel();

        lblTitle.setText("View Cars");

        tblCars.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Serial Number", "Current City", "Is Available?", "Manufacturer", "Manuf Date", "MaintCerti expired?", "Model Number", "Creation Time", "No of Seats", "Updation Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCars.setColumnSelectionAllowed(true);
        tblCars.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblCars);
        tblCars.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        rdbAvailY.setText("Yes");

        rdbAvailN.setText("No");

        lblNoOfSeats.setText("Number of Seats");

        rdbExpiredMaintCertiY.setText("Yes");

        lblModelNumb.setText("Model Number");

        rdbExpiredMaintCertiN.setText("No");

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        lblIsExpiredMaintCerti.setText("is Expired Maintenance Certificate");

        txtSerialNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSerialNumActionPerformed(evt);
            }
        });

        txtNoOfSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNoOfSeatsActionPerformed(evt);
            }
        });

        txtModelNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtModelNumActionPerformed(evt);
            }
        });

        lblSerialNum.setText("Serial Number");

        txtCurrentCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCurrentCityActionPerformed(evt);
            }
        });

        lblCurrentCity.setText("Current City");

        txtManuf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtManufActionPerformed(evt);
            }
        });

        lblIsAvail.setText("is Available");

        txtManufYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtManufYearActionPerformed(evt);
            }
        });

        lblManuf.setText("Manufacturer");

        lblManufYear.setText("Manufactured Year");

        javax.swing.GroupLayout updateJPanelLayout = new javax.swing.GroupLayout(updateJPanel);
        updateJPanel.setLayout(updateJPanelLayout);
        updateJPanelLayout.setHorizontalGroup(
            updateJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 528, Short.MAX_VALUE)
            .addGroup(updateJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(updateJPanelLayout.createSequentialGroup()
                    .addGap(65, 65, 65)
                    .addGroup(updateJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(updateJPanelLayout.createSequentialGroup()
                            .addGroup(updateJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lblIsExpiredMaintCerti)
                                .addComponent(lblIsAvail)
                                .addComponent(lblManuf)
                                .addComponent(lblManufYear)
                                .addComponent(lblNoOfSeats)
                                .addComponent(lblModelNumb)
                                .addComponent(lblSerialNum)
                                .addComponent(lblCurrentCity))
                            .addGap(18, 18, 18)
                            .addGroup(updateJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtManuf, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                                .addComponent(txtManufYear, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                                .addComponent(txtNoOfSeats, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                                .addComponent(txtModelNum, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                                .addComponent(txtCurrentCity, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                                .addGroup(updateJPanelLayout.createSequentialGroup()
                                    .addComponent(rdbAvailY)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(rdbAvailN))
                                .addComponent(txtSerialNum)
                                .addGroup(updateJPanelLayout.createSequentialGroup()
                                    .addComponent(rdbExpiredMaintCertiY)
                                    .addGap(18, 18, 18)
                                    .addComponent(rdbExpiredMaintCertiN))))
                        .addGroup(updateJPanelLayout.createSequentialGroup()
                            .addGap(176, 176, 176)
                            .addComponent(btnUpdate)))
                    .addContainerGap(66, Short.MAX_VALUE)))
        );
        updateJPanelLayout.setVerticalGroup(
            updateJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 396, Short.MAX_VALUE)
            .addGroup(updateJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, updateJPanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(updateJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblSerialNum)
                        .addComponent(txtSerialNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(3, 3, 3)
                    .addGroup(updateJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblCurrentCity)
                        .addComponent(txtCurrentCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(updateJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblIsAvail)
                        .addComponent(rdbAvailY)
                        .addComponent(rdbAvailN))
                    .addGap(30, 30, 30)
                    .addGroup(updateJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblManuf)
                        .addComponent(txtManuf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(15, 15, 15)
                    .addGroup(updateJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblManufYear)
                        .addComponent(txtManufYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(updateJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblNoOfSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtNoOfSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(13, 13, 13)
                    .addGroup(updateJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblModelNumb, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtModelNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(updateJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblIsExpiredMaintCerti, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(updateJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rdbExpiredMaintCertiY)
                            .addComponent(rdbExpiredMaintCertiN)))
                    .addGap(44, 44, 44)
                    .addComponent(btnUpdate)
                    .addContainerGap()))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(442, 442, 442)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1016, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(49, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnView)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDelete)
                        .addGap(186, 186, 186))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(updateJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(379, 379, 379))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnDelete, btnView});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnView)
                    .addComponent(btnDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(updateJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed

        int selectedRowIndex = tblCars.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to view & update");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tblCars.getModel();
        Car car = (Car) model.getValueAt(selectedRowIndex, 0);

        txtSerialNum.setText(String.valueOf(car.getCarSerialNumber()));
        txtCurrentCity.setText(car.getCurrentCity());
        txtManuf.setText(car.getManufacturer());
        txtManufYear.setText(String.valueOf(car.getManufYear()));
        txtNoOfSeats.setText(String.valueOf(car.getNumOfSeats()));
        txtModelNum.setText(car.getModelNum());
        if (car.isIsAvailabile()) {
            rdbAvailY.setSelected(true);
        } else {
            rdbAvailN.setSelected(true);
        }
        if (car.isIsExpiredMaintCerti()) {
            rdbExpiredMaintCertiY.setSelected(true);
        } else {
            rdbExpiredMaintCertiN.setSelected(true);
        }

        carForUpdate_SerialNum = car.getCarSerialNumber();      // pointer for update
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed

        int carSerialNumber = Integer.parseInt(txtSerialNum.getText());
        String currentCity = txtCurrentCity.getText();
        boolean isAvailabile = (rdbAvailY.isSelected()) ? true : false;
        String manufacturer = txtManuf.getText();
        int manufYear = Integer.parseInt(txtManufYear.getText());
        int numOfSeats = Integer.parseInt(txtNoOfSeats.getText());
        String modelNum = txtModelNum.getText();
        //creationTime
        Date updationTime = new Date();
        boolean isExpiredMaintCerti = (rdbExpiredMaintCertiY.isSelected()) ? true : false;

        Car car = catalog.getCarwSN(carForUpdate_SerialNum); // pointer for update

        if (car != null) {
            car.setCarSerialNumber(carSerialNumber);
            car.setCurrentCity(currentCity);
            car.setIsAvailabile(isAvailabile);
            car.setManufacturer(manufacturer);
            car.setManufYear(manufYear);
            car.setNumOfSeats(numOfSeats);
            car.setModelNum(modelNum);
            car.setIsExpiredMaintCerti(isExpiredMaintCerti);
            //car.setCreationTime(creationTime)
            car.setUpdationTime(updationTime);

            JOptionPane.showMessageDialog(this, "New Car details are updated");

        }


        populateTable();
        
        txtSerialNum.setText("");
        txtCurrentCity.setText("");
        txtManuf.setText("");
        txtManufYear.setText("");
        txtNoOfSeats.setText("");
        txtModelNum.setText("");
        rdbAvailY.setSelected(false);
        rdbAvailN.setSelected(false);
        rdbExpiredMaintCertiY.setSelected(false);
        rdbExpiredMaintCertiN.setSelected(false);

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void txtSerialNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSerialNumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSerialNumActionPerformed

    private void txtNoOfSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNoOfSeatsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNoOfSeatsActionPerformed

    private void txtModelNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtModelNumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtModelNumActionPerformed

    private void txtCurrentCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCurrentCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCurrentCityActionPerformed

    private void txtManufActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtManufActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtManufActionPerformed

    private void txtManufYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtManufYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtManufYearActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed

        int selectedRowIndex = tblCars.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tblCars.getModel();
        Car car = (Car) model.getValueAt(selectedRowIndex, 0);

        catalog.deleteCar(car);

        JOptionPane.showMessageDialog(this, "Selected car is deleted");

        populateTable();
    }//GEN-LAST:event_btnDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnView;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCurrentCity;
    private javax.swing.JLabel lblIsAvail;
    private javax.swing.JLabel lblIsExpiredMaintCerti;
    private javax.swing.JLabel lblManuf;
    private javax.swing.JLabel lblManufYear;
    private javax.swing.JLabel lblModelNumb;
    private javax.swing.JLabel lblNoOfSeats;
    private javax.swing.JLabel lblSerialNum;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JRadioButton rdbAvailN;
    private javax.swing.JRadioButton rdbAvailY;
    private javax.swing.JRadioButton rdbExpiredMaintCertiN;
    private javax.swing.JRadioButton rdbExpiredMaintCertiY;
    private javax.swing.JTable tblCars;
    private javax.swing.JTextField txtCurrentCity;
    private javax.swing.JTextField txtManuf;
    private javax.swing.JTextField txtManufYear;
    private javax.swing.JTextField txtModelNum;
    private javax.swing.JTextField txtNoOfSeats;
    private javax.swing.JTextField txtSerialNum;
    private javax.swing.JPanel updateJPanel;
    // End of variables declaration//GEN-END:variables

    public void populateTable() {

        DefaultTableModel model = (DefaultTableModel) tblCars.getModel();
        model.setRowCount(0);

        for (Car car : catalog.getCarsFullList()) {

            Object[] row = new Object[10];
            row[0] = car;   //car.getCarSerialNumber()   ob with tostring invoked - to identify apt car
            row[1] = car.getCurrentCity();
            row[2] = car.isIsAvailabile();
            row[3] = car.getManufacturer();
            row[4] = car.getManufYear();
            row[5] = car.isIsExpiredMaintCerti();
            row[6] = car.getModelNum();

            SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
            row[7] = sdf.format(car.getCreationTime());
            row[8] = car.getNumOfSeats();
            row[9] = (null!=car.getUpdationTime())?sdf.format(car.getUpdationTime()):"";

            model.addRow(row);

        }

    }
}
